import java.util.LinkedList;
import java.util.Deque;
import java.util.Scanner;

public class Main {

	public static void main(String[] args){
		Deque<Integer> dq = new LinkedList<Integer>();
		StringBuilder sb = new StringBuilder();
		Scanner in = new Scanner(System.in);
		
		int N = in.nextInt();
		int num = 0;
		
		for(int i=0; i<N; i++) {
			String order = in.next();
			
			switch(order) {
			case "push_front":
				num = in.nextInt();
				dq.offerFirst(num);
				break;
			case "push_back":
				num = in.nextInt();
				dq.offerLast(num);
				break;
			case "pop_front":
				if(dq.isEmpty()) {
					sb.append("-1").append("\n");
				}else {
					sb.append(dq.pollFirst()).append("\n");
				}
				break;
			case "pop_back":
				if(dq.isEmpty()) {
					sb.append("-1").append("\n");
				}else {
					sb.append(dq.pollLast()).append("\n");
				}
				break;
			case "size":
				sb.append(dq.size()).append("\n");
				break;
			case "empty":
				if(dq.isEmpty()) {
					sb.append("1").append("\n");
				}else {
					sb.append("0").append("\n");
				}
				break;
			case "front":
				if(dq.isEmpty()) {
					sb.append("-1").append("\n");
				}else {
					sb.append(dq.peekFirst()).append("\n");
				}
				break;
			case "back":
				if(dq.isEmpty()) {
					sb.append("-1").append("\n");
				}else {
					sb.append(dq.peekLast()).append("\n");
				}
				break;
			}
		}
		
		System.out.println(sb);
		in.close();
	}
}
