import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {

    //단순히 열에서 가장 작은 수만을 구해서 더해주면 안 된다.
    //모든 행과 열의 경우의 수를 구해줘야 한다.
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        //dp[][0]은 사자를 아예 넣지 않은 경우
        //dp[][1]은 사자를 왼쪽 방에 넣은 경우
        //dp[][2]는 사자를 오른쪽 방에 넣은 경우
        int[][] dp = new int[N+1][3];

        //사자가 첫 번째 열에 있는 경우를 가정
        dp[1][0] = 1;
        dp[1][1] = 1;
        dp[1][2] = 1;

        //두 번째 열부터 사자의 위치를 고려
        for(int i=2; i<=N; i++){
            //i번째 열에 사자가 존재하지 않을 경우
            //전 번째 열에 사자가 존재하지 않아도, 왼쪽에 존재해도, 오른쪽에 존재해도 가능하다.
            dp[i][0] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2])%9901;
            //i번째 열의 왼쪽에 사자가 존재하는 경우
            //전 번째 열에 사자가 존재하지 않아도, 오른쪽에 존재해도 가능하다.
            dp[i][1] = (dp[i-1][0] + dp[i-1][2])%9901;
            //i번째 열의 오른쪽에 사자가 존재하는 경우
            //전 번째 열에 사자가 존재하지 않아도, 왼쪽에 존재해도 가능하다.
            dp[i][2] = (dp[i-1][0] + dp[i-1][1])%9901;
        }

        int sum = (dp[N][0] + dp[N][1] + dp[N][2])%9901;

        System.out.println(sum);

    }
}
