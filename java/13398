import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int[] arr = new int[n];
        int[] dp1 = new int[n];
        int[] dp2 = new int[n];
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");

        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }

        //왼쪽부터 시작하는 최대 연속 합
        dp1[0] = arr[0];
        int Max = dp1[0];
        for(int i=1; i<n; i++){
            dp1[i] = Math.max(arr[i], dp1[i-1]+arr[i]);
            if(dp1[i] > Max){
                Max = dp1[i];
            }
        }

        //오른쪽부터 시작하는 최대 연속 합
        dp2[n-1] = arr[n-1];
        for(int i=n-2; i>=0; i--){
            dp2[i] = Math.max(arr[i], dp2[i+1]+arr[i]);
        }

        //인덱스 i의 값을 지운다고 가정한 후 그 값 기준으로 왼쪽 방향 최댓값과 오른쪽 방향 최댓갑을 더해서 구함
        for(int i=1; i<n-1; i++){
            int tmp = dp1[i-1] + dp2[i+1];
            //수를 지운 수열의 최댓값과 이전의 최대값을 비교한다
            //첫 비교에는 아무것도 삭제하지 않은 수열의 최댓값이 들어간다
            Max = Math.max(tmp, Max);
        }
        System.out.println(Max);

    }
}
