class Solution {
    
    public static int[][] dp;
    public static int alp_max;
    public static int cop_max;
    
    public void check(int al, int co, int[][] problems){
        for(int i=0; i<problems.length; i++){
            //만일 해당 문제를 풀 수 있다면
            if(al >= problems[i][0] && co >= problems[i][1]){         
                if(al+problems[i][2] <= alp_max && co+problems[i][3] <= cop_max){
                    //해당 문제를 풀고 업그레이드 된 능력치가 범위 안에만 있다면
                    dp[al+problems[i][2]][co+problems[i][3]] = Math.min(dp[al+problems[i][2]][co+problems[i][3]], dp[al][co]+problems[i][4]);
                }else if(al+problems[i][2] > alp_max && co+problems[i][3] > cop_max){
                    //해당 문제를 풀고 능력치들이 최대값을 넘었다면
                    dp[alp_max][cop_max] = Math.min(dp[alp_max][cop_max], dp[al][co] + problems[i][4]);
                }else if(al+problems[i][2] > alp_max){
                    //해당 문제를 풀고 알고력만이 최대값을 넘었다면
                    dp[alp_max][co+problems[i][3]] = Math.min(dp[alp_max][co+problems[i][3]], dp[al][co]+problems[i][4]);
                }else if(co+problems[i][3] > cop_max){
                    //해당 문제를 풀고 코딩력만이 최대값을 넘었다면
                    dp[al+problems[i][2]][cop_max] = Math.min(dp[al+problems[i][2]][cop_max], dp[al][co]+problems[i][4]);
                }
            }
        }
    }
    
    public int solution(int alp, int cop, int[][] problems) {
        int answer = 0;
        alp_max = 0;
        cop_max = 0;

        //알고력과 
        for(int i=0; i<problems.length; i++){        
            if(problems[i][0] > alp_max){
                alp_max = problems[i][0];
            }
            if(problems[i][1] > cop_max){
                cop_max = problems[i][1];
            }
        }
        
        if(alp>=alp_max && cop>=cop_max){
            return 0;
        }
        if(alp>=alp_max){
            alp = alp_max;
        }
        if(cop>=cop_max){
            cop=cop_max;
        }
        
        dp = new int[alp_max+2][cop_max+2];
        for(int i=alp; i<=alp_max; i++){
            for(int j=cop; j<=cop_max; j++){
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[alp][cop] = 0;
        
        for(int i=alp; i<=alp_max; i++){
            for(int j=cop; j<=cop_max; j++){
                dp[i+1][j] = Math.min(dp[i+1][j], dp[i][j]+1);
                dp[i][j+1] = Math.min(dp[i][j+1], dp[i][j]+1);
                check(i, j, problems);
            }
        }
        
        
        for(int i=alp; i<=alp_max+1; i++){
            for(int j=cop; j<=cop_max+1; j++){
                System.out.print(dp[i][j] + " ");
            }
            System.out.println();
        }

        answer = dp[alp_max][cop_max];
        return answer;
    }
}
