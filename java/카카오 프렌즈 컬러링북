class Solution {
    
    //상하좌우
    public static int[] dr = {-1, 1, 0, 0};
    public static int[] dc = {0, 0, -1, 1};
    public static boolean[][] visit;
    public static int[][] map;
    public static int num;
    
    public int[] solution(int m, int n, int[][] picture) {
        int numberOfArea = 0;
        int maxSizeOfOneArea = 0;

        int[] answer = new int[2];
        answer[0] = numberOfArea;
        answer[1] = maxSizeOfOneArea;
        visit = new boolean[m][n];
        map = new int[m][n];
        map = picture;
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(map[i][j] != 0 && !visit[i][j]){ //색이 칠해져 있으며 새로운 영역을 발견함
                    num = 1;//새로운 영역의 칸 수를 세는 변수
                    numberOfArea++;//새로운 영역이 발견됐음을 표시
                    maxSizeOfOneArea = Math.max(maxSizeOfOneArea, dfs(i, j));//새로운 영역 탐색
                }
            }
        }
        
        answer[0] = numberOfArea;
        answer[1] = maxSizeOfOneArea;
        return answer;
    }
    
    public static int dfs(int x, int y){
        visit[x][y] = true;//현재 영역을 방문했음으로 표시
        int current = map[x][y];//현재 영역의 색의 종류를 넣는 변수
        
        for(int i=0; i<4; i++){
            int rx = x + dr[i];//탐색하려는 영역의 열 값
            int ry = y + dc[i];//탐색하려는 영역의 행 값
            
            if(rx >= 0 && ry >= 0 && rx < map.length && ry < map[0].length){//탐색하려는 영역의 위치가 map에 속해있는지 확인
                    if(map[rx][ry] == current && !visit[rx][ry]){//만일 탐색하려는 영역이 현재 영역과 종류가 같으며 탐색하기 전이라면
                    num++;//동일한 영역에 새로운 값을 발견했음을 표시
                    dfs(rx, ry);//탐색하려는 영역에서부터 다시 탐색 시작
                }
            }

        }
        
        return num;
    }
}
