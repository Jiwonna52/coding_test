import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;


class node{
    int data;
    int length;

    node(int data, int length){
        this.data = data;
        this.length = length;
    }

}

public class Main {
    public static int N;
    public static int answer;
    public static List<node>[] map;
    public static boolean[] visit;

    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        answer = 0;

        map = new ArrayList[N+1];
        for(int i=0; i<N+1; i++){
            map[i] = new ArrayList<node>();
        }

        for(int i=0; i<N-1; i++){
            String[] tmp = br.readLine().split(" ");
            int a = Integer.parseInt(tmp[0]);
            int b = Integer.parseInt(tmp[1]);
            int c = Integer.parseInt(tmp[2]);
            map[a].add(new node(b, c));
            map[b].add(new node(a, c));
        }

        //각 노드를 루트로 한 번씩 실행한다.
        for(int i=1; i<=N; i++){
            visit = new boolean[N+1];
            visit[i] = true;
            DFS(i, 0);
        }

        System.out.println(answer);

        return;
    }

    public static void DFS(int data, int len){

        //각 노드를 검사하면서 지름을 구함
        for(node n : map[data]){
            if(!visit[n.data]){
                visit[n.data] = true;
                DFS(n.data, n.length+len);
            }
        }

        //만일 구한 지름이 현재 answer보다 작다면 answer을 len으로 바꿈
        if(len > answer){
            answer = len;
        }

        return;
    }

}
