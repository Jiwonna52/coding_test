import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    //수열의 범위를 지정하는 N
    public static int N;
    //수열의 길이를 지정하는 M
    public static int M;
    //수열을 넣을 배열 arr
    public static int[] arr;
    //해당 수가 탐색이 되었음을 확인하는 배열 visit
    public static boolean[] visit;
    public static StringBuilder sb = new StringBuilder();

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st  = new StringTokenizer(br.readLine(), " ");

        N = Integer.parseInt(st.nextToken());
        //M = Integer.parseInt(st.nextToken());

        //수열의 길이만큼
        arr = new int[N];
        //가능한 숫자의 범위만큼
        visit = new boolean[N];

        //깊이는 0으로 초기화
        dfs(0);
        System.out.println(sb);

    }

    //예를 들어 N이 3, M이 2라고 하자
    //1. dfs(0) 호출로 깊이가 0인 즉, arr배열의 인덱스 0부터 시작한다.
    //7. dfs(1) 호출로 깊이가 1인 즉, arr배열의 인덱스 1의 탐색을 시작한다.
    public static void dfs(int depth){

        if(depth == N){
            for(int tmp : arr){
                sb.append(tmp).append(" ");
            }
            sb.append('\n');
            return;
        }

        for(int i=0; i<N; i++){
            if(!visit[i]){
                visit[i] = true;
                arr[depth] = i + 1;
                dfs(depth+1);
                visit[i] = false;
            }

            }
        }
    }
