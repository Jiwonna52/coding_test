import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
    public static int[] map;
    public static boolean[] visit;
    public static int[] count;
    public static int N, M, idx;

    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        visit = new boolean[101];
        map = new int[101];
        count = new int[101];

        String[] s = br.readLine().split(" ");
        N = Integer.parseInt(s[0]);
        M = Integer.parseInt(s[1]);

        for(int i=0; i<N+M; i++){
            String[] tmp = br.readLine().split(" ");
            int a = Integer.parseInt(tmp[0]);
            int b = Integer.parseInt(tmp[1]);

            map[a] = b;
        }

        DFS();

        return;
    }

    public static void DFS(){
        Queue<Integer> queue = new LinkedList<>();
        queue.add(1);
        visit[1] = true;

        while(!queue.isEmpty()){
            int current = queue.poll();

            if(current == 100){
                System.out.println(count[100]);
                return;
            }

            for(int i=1; i<7; i++){
                int next = current + i;

                if(next > 100){
                    continue;
                }

                if(visit[next]){
                    continue;
                }

                visit[next] = true;

                //뱀 혹은 사다리라 다론 곳으로 이동할 때
                //이동한 곳을 방문했다고 표시
                if(map[next] != 0 && !visit[map[next]]){
                    queue.add(map[next]);
                    visit[map[next]] = true;
                    count[map[next]] = count[current] + 1;
                }else if(map[next] == 0){
                    queue.add(next);
                    count[next] = count[current] + 1;
                }
            }
        }

        return;

    }

}
