import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Stack;

class Solution {
    public static List<String> list;
    public static char[] arr;
    public static boolean[] visit;
    public static char[] make;
    public static Map<String, Integer> map;
    public static long answer;
    
    public long solution(String expression) {
        answer = 0;
        list = new ArrayList<String>();
        String num = "";
        
        //연산자와 숫자를 따로 리스트에 넣어준다.
        for(int i=0; i<expression.length(); i++){
             if(expression.charAt(i) == '+' || expression.charAt(i) == '-' || expression.charAt(i) == '*'){
                 list.add(num);
                 list.add(Character.toString(expression.charAt(i)));
                 num = "";
             }else{
                 num += expression.charAt(i);
             }
        }
        list.add(num);
        
        //우선순위 구하기 위한 배열 초기값
        arr = new char[] {'+', '-', '*'};
        visit = new boolean[3];
        make = new char[3];
        
        //우선순위 구하기
        dfs(0);
        
        return answer;
    }
    
    //연산자 우선순위 만들기
    public static void dfs(int depth){
        //깊이가 3으로 배열이 하나 완성됐다면 계산을 해줘야 한다.
        if(depth == 3){
            //우선순위를 map을 이용해 할당한다.
            int value = 3;
             map = new HashMap<>();
            for(char tmp : make){
                map.put(Character.toString(tmp), value);
                value--;
            }
            //계산한 값과 기존 answer 중 큰 값을 answer에 넣는다.
            long tmp_c = cal();
            if(answer < tmp_c){
                answer = tmp_c;
            }
            
            return;
        }
        
        //우선순위 배열 만들기
        for(int i=0; i<3; i++){
            if(!visit[i]){
                visit[i] = true;
                make[depth] = arr[i];
                dfs(depth+1);
                visit[i] = false;
            }
        }
    }
    
    //만들어진 우선순위대로 계산하기
    public static long cal(){
        Stack<String> stack = new Stack<String>();
        List<String> post = new ArrayList<String>();
        Stack<Long> c = new Stack<Long>();
        long result = 0;
        long n = 0;
        
        //우선순위대로 후위 연산자를 만들어 준다.        
        for(String tmp : list){
            if("*".equals(tmp) || "+".equals(tmp) || "-".equals(tmp)){
                while(!stack.isEmpty() && (map.get(stack.peek()) >= map.get(tmp))){
                    post.add(stack.pop());
                }
                stack.push(tmp);
            }else{
                post.add(tmp);
            }
        }
        while(!stack.isEmpty()){
            post.add(stack.pop());
        }
       
        //만들어진 후위수식을 이용해 값을 계산한다.
        for(String tmp : post){
            if("*".equals(tmp) || "+".equals(tmp) || "-".equals(tmp)){
                Long first = c.pop();
                Long second = c.pop();
                String op = tmp;
                switch(op){
                    case "*":
                        c.push(first * second);
                        break;
                    case "+":
                        c.push(first + second);
                        break;
                    case "-":
                        c.push(second - first);
                        break;
                }
            }else{
                c.push(Long.parseLong(tmp));
            }
        }
        
        result = Math.abs(c.peek());
        
        return result;
    
    }
    
}
