import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

    public static boolean[] visit;
    public static int[][] map;
    public static int[] arr;
    public static int n;

    public static int min;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        map = new int[n][n];
        visit = new boolean[n];
        arr = new int[n];
        min = Integer.MAX_VALUE;

        //길이 입력받기
        for(int i=0; i<n; i++){
            StringTokenizer st = new StringTokenizer(br.readLine(), " ");
            for(int j=0; j<n; j++){
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        dfs(0);

        System.out.println(min);
    }

    public static void dfs(int depth){
        if(depth == n){
            int sum = 0;
            boolean check = true;
            for(int i=0; i<arr.length-1; i++){
                if(map[arr[i]][arr[i+1]] == 0){
                    check = false;
                    break;
                }else{
                    sum += map[arr[i]][arr[i+1]];
                }
            }

            if(check){
                if(map[arr[arr.length-1]][arr[0]] != 0){
                    sum += map[arr[arr.length-1]][arr[0]];
                    if(min > sum){
                        min = sum;
                    }
                }
            }

            return;
        }

        for(int i=0; i<n; i++){
            if(!visit[i]){
                visit[i] = true;
                arr[depth] = i;
                dfs(depth+1);
                visit[i] = false;
            }
        }
    }
}
