import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Iterator;
import java.util.StringTokenizer;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class Main {

    //4, 6, 5, 7, 3, 2, 1의 경우 4, 6, 5와 7, 3, 2, 1로 나눌 수 있다.
    //7, 3, 2, 1은 이미 최대로 만들 수 있는 내림차순이기 때문에 5와 7을 바꿔줘야 한다.
    //4, 6, 7, 5, 3, 2, 1이 됐을 경우 5, 3, 2, 1을 1, 2, 3, 5인 오름차순으로 바꿔주면 사전 순으로 정렬이 가능하다.

    static public int n;
    static public int[] arr;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        n = Integer.parseInt(br.readLine());
        arr = new int[n];
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");

        //주어진 배열 넣기
        for(int i=0; i<n; i++){
            arr[i] = Integer.parseInt(st.nextToken());
        }

        if(next()){
            for(int i=0; i<arr.length; i++){
                System.out.print(arr[i] + " ");
            }
        }else{
            System.out.print("-1");
        }

    }

    public static boolean next(){

        //arr[i] <= arr[i-1]인 i의 최소 인덱스를 찾는다.
        //7, 2, 3, 6, 5, 4, 1 일때 i는 6
        int i = arr.length - 1;
        while(i>0 && arr[i] <= arr[i-1]){
            i--;
        }

        //아무리 찾아도 arr[i] <= arr[i-1]인 숫자가 없을 때 즉, 다음에 올 수열이 존재하지 않을 때
        //거짓을 리턴한다.
        if(i <= 0){
            return false;
        }

        //i-1보다 작거나 같은 j의 최댓값을 찾는다.
        //arr[i-1]은 3이고 이보다 작거나 같은 j의 최댓값은 4이다.
        int j = arr.length-1;
        while(arr[i-1] >= arr[j]){
            j--;
        }

        //둘을 바꿔준다.
        //7, 2, 4, 6, 5, 3, 1
        swap(i-1, j);

        //i보다 뒤에 있는 값을 뒤집는다.
        //7, 2, 4, 1, 3, 5, 6
        j= arr.length-1;
        while(i < j){
            swap(i, j);
            i++;
            j--;
        }
        return true;
    }

    public static void swap(int a, int b){
        int tmp = arr[a];
        arr[a] = arr[b];
        arr[b] = tmp;
    }

}
