import java.util.Queue;
import java.util.LinkedList;

class Solution {
    public static char[][] map;
    public static int answer;
    
    public int solution(int m, int n, String[] board) {
        answer = 0;
        map = new char[m][n];
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                map[i][j] = board[i].charAt(j);
            }
        }
        
        while(countBox(m, n));
        
        return answer;
    }
    
    public boolean countBox(int m, int n){
        boolean[][] visit = new boolean[m][n];
        int count = 0;
        
        //4x4 찾기
        for(int i=0; i<m-1; i++){
            for(int j=0; j<n-1; j++){
                if(map[i][j] != '.'){
                    if(check(i, j)){
                        visit[i][j] = true;
                        visit[i+1][j] = true;
                        visit[i][j+1] = true;
                        visit[i+1][j+1] = true;
                    }
                }

            }
        }
        
        //4x4에서 표시한 칸 갯수 세기 + 해당 칸 지우기
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(visit[i][j] == true){
                    count++;
                    map[i][j] = '.';
                }
            }
        }
        
        //칸 내리기
        for(int i=0; i<n; i++){
            Queue<Character> queue = new LinkedList<>();
            for(int j=m-1; j>=0; j--){
                if(map[j][i] != '.'){
                    //'.'이 아닌 블록을 전부 모아서 큐에 넣는다.
                    queue.add(map[j][i]);
                }
            }
            
            //큐에 넣은 블록들을 밑에서부터 다시 체워준다.
            int idx = m-1;
            while(!queue.isEmpty()){
                map[idx--][i] = queue.poll();
            }
            
            //블록을 다 체워줬다면 그 위에 있는 블록은 '.'으로 바꿔준다.
            for(int j=idx; j>=0; j--){
                map[j][i] = '.';
            }
        }
        
        answer += count;
        
        return (count > 0) ? true : false;
    
}
    
    //사방 확인
    public boolean check(int m, int n){
        char current = map[m][n];
        if(map[m+1][n] == current && map[m][n+1] == current && map[m+1][n+1] == current){
            return true;
        }else{
            return false;
        }
    }
}
