class Solution {

    public int minimumTime(int n, int[][] relations, int[] time) {
        List<List<Integer>> list = new ArrayList<>();
        int[] pre = new int[n+1];
        Queue<Integer> queue = new LinkedList<>();
        int answer = 0;
        int[] maxTime = new int[n+1];

        for (int i=0; i<=n; i++) {
            list.add(new ArrayList<>());
        }

        for (int i=0; i<relations.length; i++) {
            int a = relations[i][0];
            int b = relations[i][1];

            pre[b]++;
            list.get(a).add(b);
        }

        for (int i=1; i<=n; i++) {
            if (pre[i] == 0) {
                queue.add(i);
                maxTime[i] = time[i-1];
            }
        }

        while(!queue.isEmpty()) {
            int current = queue.poll();

            for (int nextNode : list.get(current)) {
                pre[nextNode]--;
                maxTime[nextNode] = Math.max(maxTime[nextNode], maxTime[current] + time[nextNode-1]);

                if (pre[nextNode] == 0) {
                    queue.add(nextNode);
                }
            }
        }

        for (int i=1; i<=n; i++) {
            answer = Math.max(answer, maxTime[i]);
        }

        return answer;
    }
}
