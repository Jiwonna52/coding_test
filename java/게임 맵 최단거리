import java.util.Queue;
import java.util.LinkedList;

class pair{
    int r;
    int c;
    
    public pair(int r, int c){
        this.r = r;
        this.c = c;
    }
    
}

class Solution {
    
    public static int[] dr = {-1, 1, 0, 0};
    public static int[] dc = {0, 0, -1, 1};
    public static int[][] count;
    public static boolean[][] visit;
    public static int row;
    public static int col;
    public static int[][] map;
    
    public int solution(int[][] maps) {
        int answer = 0;
        row = maps.length;
        col = maps[0].length;
        count = new int[row][col];
        visit = new boolean[row][col];
        map = maps;

        answer = bfs();
        
        return answer;
    }
    
    public static int bfs(){
        Queue<pair> q = new LinkedList<>();
        q.add(new pair(0, 0));
        visit[0][0] = true;
        count[0][0] = 1;
        
        while(!q.isEmpty()){
            pair current = q.poll();
            int cr = current.r;
            int cc = current.c;
            
            for(int i=0; i<4; i++){
                int nextr = cr + dr[i];
                int nextc = cc + dc[i];
                
                if(nextr >= 0 && nextc >= 0 && nextr < row && nextc < col){
                    if(!visit[nextr][nextc] && map[nextr][nextc] == 1){
                        visit[nextr][nextc] = true;
                        count[nextr][nextc] = count[cr][cc] + 1;
                        q.add(new pair(nextr, nextc));
                    }
                }
            }
        }
        
        if(count[row-1][col-1] == 0){
            return -1;
        }
        
        return count[row-1][col-1];
    }
    
    
}
