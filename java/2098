import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;


public class Main {
    public static int[][] map;
    public static int[][] dp;
    public static int n;
    static final int INF = 987654321;

    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        n = Integer.parseInt(br.readLine());
        map = new int[n][n];
        dp = new int[n][(1<<n)-1];

        //일단 각 간선들의 길이를 표시함
        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<n; j++){
                int w = Integer.parseInt(st.nextToken());
                map[i][j] = w;
            }
        }

        //dp의 모든 값을 -1로 초기화
        for(int i=0; i<n; i++){
            Arrays.fill(dp[i], -1);
        }

        System.out.println(dfs(0, 1));

        return;
    }

    public static int dfs(int city, int visit){

        //만일 모든 노드를 방문했다면
        if(visit == (1<<n)-1){
            //그럴 일은 없겠지만 마지막 노드와 첫 노드가 연결되있지 않으면 INF(최대값)을 반환
            if(map[city][0] == 0){
                return INF;
            }
            //마지막 노드와 첫 노드를 이어주는 값을 반환
            return map[city][0];
        }

        //만일 해당 루트를 한 번 방문한 적 있다면 해당 루트를 방문했던 값을 반환
        if(dp[city][visit] != -1){
            return dp[city][visit];
        }

        dp[city][visit] = INF;
        //0부터 n-1까지의 노드를 방문
        //dp[city][visit]와 dfs(i, visit | (1<<i)) + map[city][i] 사이의 값 중 제일 직은 값을 dp[city][visit]에 넣어준다.
        //'dfs(i, visit | (1<<i)) + map[city][i]'란 노드 i를 방문 표시해준 값을 dfs 재귀로 찾고 거기에다가 coty와 i를 잇는 값을 더해준다.
        for(int i=0; i<n; i++){
            int next = visit | (1<<i);
            if(map[city][i] == 0 || (visit & (1<<i)) != 0){
                continue;
            }
            dp[city][visit] = Math.min(dp[city][visit], dfs(i, next) + map[city][i]);
        }

        //최종 값을 리턴
        return dp[city][visit];
    }
}
