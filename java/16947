import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

class pair{
    int n;
    int count;
    pair(int n, int count){
        this.n = n;
        this.count = count;
    }
}

public class Main {

    public static List<Integer>[] map;
    public static boolean[] visit;
    //public static boolean[] cycle;
    public static int N;

    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        map = new ArrayList[N+1];
        visit = new boolean[N];

        for(int i=0; i<N; i++){
            map[i] = new ArrayList<>();
        }

        for(int i=0; i<N; i++){
            StringTokenizer st = new StringTokenizer(br.readLine(), " ");
            int a = Integer.parseInt(st.nextToken())-1;
            int b = Integer.parseInt(st.nextToken())-1;
            map[a].add(b);
            map[b].add(a);
        }

        //순환을 찾는다.
        for(int i=0; i<N; i++){
            if(check(i, i, i)){
                break;
            }
            //순환이 없으면 전부 false로
            visit = new boolean[N+1];
        }

        //정답을 넣는 배열
        int[] answer = new int[N+1];
        //visit에서 false인 노드는 지선 노드란 의미
        for(int i=0; i<N; i++){
            //순환에서 가장 가까운 거리를 측정함
            if(!visit[i]){
                answer[i] = BFS(i);
            }
        }

        for(int i=0; i<N; i++){
            System.out.print(answer[i] + " ");
        }
        return;
    }

    static public boolean check(int start, int prev, int node){
        //해당 노드를 순환 안에 넣어줌
        visit[node] = true;

        //해당 노드와 연관된 노드를 모두 탐색
        for(int i=0; i<map[node].size(); i++){
            //연관된 노드를 하나씩 next에 넣어줌
            int next = map[node].get(i);
            //만일 next를 방문하지 않았다면
                if(!visit[next]){
                    //else if 조건으로 true가 반환되면 쭉 true를 반환한다.
                    if(check(start, node, next)){
                        return true;
                    }
                    //만일 해당 노드를 방문했고 시작 노드와 같다면 true룰 반환
                }else if(next != prev && next == start){
                    return true;
                }
        }
        //방문은 했으나 순환에 포함되지 않는 경우 false를 반환
        //순환에 포함되지 않음 -> else if의 조건에 걸리지 않음
        visit[node] = false;

        //for문이 끝나면 false를 먼저 반환하고 차례대로 남은 메소드를 확인함
        return false;
    }

    static public int BFS(int node) {
        Queue<pair> q = new LinkedList<>();
        //지선의 노드와 연결된 노드들을 방문했는지 확인하는 배열
        boolean[] visited = new boolean[N];
        q.add(new pair(node, 0));
        visited[node] = true;

        while(!q.isEmpty()){
            pair current = q.poll();
            //순환에 포함된 노드가 나오면 count를 반환한다.
            if(visit[current.n]){
                return current.count;
            }

            //지선의 노드와 연결된 노드를 모두 검사한다.
            for(int i=0; i<map[current.n].size(); i++){
                int next = map[current.n].get(i);
                //만일 연결된 노드 중 방문하지 않은 노드가 있다면 해당 노드를 방문하고 큐에 넣어준다.
                if(!visited[next]){
                    visited[next] = true;
                    q.add(new pair(next, current.count+1));
                }
            }
        }

        return 0;
   }
}
