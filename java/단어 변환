import java.util.Map;
import java.util.LinkedList;
import java.util.Queue;

class Solution {
    
    public static int[][] map;
    public static int[] count;
    public static boolean[] visit;
    public static int n;
    
    public int solution(String begin, String target, String[] words) {
        int answer = 0;
        n = words.length;
        String[] newWords = new String[words.length + 1]; 
        map = new int[n+1][n+1];
        count = new int[n+1];
        visit = new boolean[n+1];
        newWords[0] = begin;
        
        for(int i=0; i<n; i++){
            newWords[i+1] = words[i];
        }
        
        for(int i=0; i<=n; i++){
            count[i] = Integer.MAX_VALUE;
        }
        
        for(int i=0; i<=n; i++){
            String tmp = newWords[i];
            for(int j=0; j<=n; j++){
                if(map[i][j] != 1){
                    if(tmp.equals(newWords[j])){
                        map[i][j] = 1;
                    }else if(check(tmp, newWords[j])){
                        map[i][j] = 1;
                        map[j][i] = 1;
                    }
                }
            }
        }

        BFS();
        
        for(int i=0; i<=n; i++){
            if(target.equals(newWords[i])){
                answer = count[i];
            }
        }
        
        return answer;
    }
    
    public static void BFS(){
        Queue<Integer> queue = new LinkedList<>();
        queue.add(0);
        visit[0] = true;
        count[0] = 0;
        
        while(!queue.isEmpty()){
            int current = queue.poll();
            
            for(int i=0; i<=n; i++){
                if(map[current][i] != 0 && !visit[i]){
                    queue.add(i);
                    visit[i] = true;
                    count[i] = Math.min(count[current]+1, count[i]);
                }
            }
            
        }
        
    }
    
    public static boolean check(String tmp, String compare){
        int length = tmp.length();
        boolean flag = false;
        
        for(int i=0; i<length; i++){
            if(tmp.charAt(i) != compare.charAt(i)){
                if(flag){
                    return false;
                }
                flag = true;
            }
        }
        
        return true;
    }
}
