import java.util.*;
import java.io.*;

class Pair {
    int row;
    int col;

    Pair (int row, int col) {
        this.row = row;
        this.col = col;
    }
}

public class Main {
    public static int rowLength, colLength;
    public static int[][] map;

    public static int[] dR = {-1, 0, 1, 0};
    public static int[] dC = {0, 1, 0, -1};
    public static boolean[][] visit;


    // 공기를 기준으로
    public static void bfs(int r, int c) {
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(r, c));

        while (!queue.isEmpty()) {
            Pair current = queue.poll();
            int cR = current.row;
            int cC = current.col;

            for (int i=0; i<4; i++) {
                int nR = cR + dR[i];
                int nC = cC + dC[i];

                if (nR >= 0 && nR < rowLength && nC >= 0 && nC < colLength) {
                    if (!visit[nR][nC] && map[nR][nC] == 0) {
                        visit[nR][nC] = true;
                        queue.add(new Pair(nR, nC));
                    } else if(map[nR][nC] == 1) {
                        map[nR][nC] = 2;
                    }
                }
            }
        }
    }

    public static int deleteCheese() {
        int count = 0;
        for (int i=0; i<rowLength; i++) {
            for (int j=0; j<colLength; j++) {
                if (map[i][j] == 2) {
                    map[i][j] = 0;
                    count++;
                }
            }
        }
        return count;
    }

    public static boolean findFinish() {
        for (int i=0; i<rowLength; i++) {
            for (int j=0; j<colLength; j++) {
                if (map[i][j] != 0) {
                    return false;
                }
            }
        }
        return true;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        rowLength  = Integer.parseInt(st.nextToken());
        colLength = Integer.parseInt(st.nextToken());
        map = new int[rowLength][colLength];
        int answer = 0;
        int cheeseCount = 0;

        for (int i=0; i<rowLength; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j=0; j<colLength; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }


        while (!findFinish()) {
            //display();
            answer += 1;
            visit = new boolean[rowLength][colLength];
            bfs(0, 0);

            cheeseCount = deleteCheese();
        }

        System.out.println(answer);
        System.out.println(cheeseCount);

    }

}
