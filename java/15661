import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static int[][] arr;
    public static boolean[] visit;
    public static int N;
    public static int min;
    public static  int stop;


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        arr = new int[N][N];
        visit = new boolean[N];
        int idx = 0;
        min = Integer.MAX_VALUE;
        stop = 1;

        for(int i=0; i<N; i++){
            StringTokenizer st = new StringTokenizer(br.readLine(), " ");
            while(st.hasMoreTokens()){
                arr[i][idx] = Integer.parseInt(st.nextToken());
                idx++;
            }
            idx = 0;
        }

        for(stop=1; stop<N; stop++){
            dfs( 0, 0);
        }

        System.out.println(min);
    }

    public static void dfs(int at, int depth){
        if(depth == stop){
            int start = 0;
            int link = 0;
            for(int i=0; i<visit.length-1; i++){
                for(int j=i+1; j<visit.length; j++){
                    if(visit[i] == true && visit[j] == true){
                        start += arr[i][j];
                        start += arr[j][i];
                    }else if(visit[i] == false && visit[j] == false){
                        link += arr[i][j];
                        link += arr[j][i];
                    }
                }
            }

            int m = Math.abs(start - link);

            min = Math.min(min, m);
            return;
        }

        for(int i=at; i<N; i++){
            if(!visit[i]){
                visit[i] = true;
                dfs(i+1, depth+1);
                visit[i] = false;
            }
        }
    }

}
