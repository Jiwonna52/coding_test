import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    //수열의 범위를 지정하는 N
    public static int N;
    //수열의 길이를 지정하는 M
    public static int M;
    //수열을 넣을 배열 arr
    public static int[] arr;
    //해당 수가 탐색이 되었음을 확인하는 배열 visit
    public static boolean[] visit;
    public static StringBuilder sb = new StringBuilder();

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st  = new StringTokenizer(br.readLine(), " ");

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        //수열의 길이만큼
        arr = new int[M];
        //가능한 숫자의 범위만큼
        visit = new boolean[N];

        //깊이는 0으로 초기화
        dfs(0);
        System.out.println(sb);

    }

    //예를 들어 N이 3, M이 2라고 하자
    //1. dfs(0) 호출로 깊이가 0인 즉, arr배열의 인덱스 0부터 시작한다.
    //7. dfs(1) 호출로 깊이가 1인 즉, arr배열의 인덱스 1의 탐색을 시작한다.
    public static void dfs(int depth){
        //27. depth가 0이었던 때(depth가 0, i가 0)로 돌아간다.

        //종료 조건
        //만일 깊이가 M과 같다면 즉, 수열의 길이가 M을 충족했다면 수열을 만들고
        //15. depth가 2이고 M이 2인지라 if문이 실행된다.
        //23. depth가 2이고 M이 2인지라 if문이 실행된다.
        if(depth == M){
            //16. 배열에 있는 값들(12)을 띄어쓰기와 함께 붙여준다.
            //24. 배열에 있는 값들(13)을 띄어쓰기와 함께 붙여준다.
            for(int tmp : arr){
                sb.append(tmp).append(" ");
            }
            //16. 한 수열을 문자열로 만들어 줬으므로 커서를 밑으로 내린다.
            //24. 배열에 있는 값들을 띄어쓰기와 함께 붙여준다.
            sb.append('\n');
            //17. 이전 노드(depth가 1이었던 때)로 return한다.
            //25. 이전 노드(depth가 1이었던 때)로 return한다.
            return;
        }

        //2. depth(arr배열의 인덱스)가 0이고 i가 0인 상황
        //8. depth(arr배열의 인덱스)가 1이고 i는 0인 상황.
        //10. depth(arr배열의 인덱스)가 1이고 i는 1인 상황.
        //17. depth(arr배열의 인덱스)가 1이고 i는 0인 상황.
        //29. depth가 0이고 i가 0에서 1로 ++된다.
        for(int i=0; i<N; i++){
            //해당 노드를 방문하지 않았다면
            //3. visit[0]은 방문을 하지 않았으므로 if문 안의 명령문들이 실행된다.
            //9. visit[0]은 3번에서 방문했으므로 if문 안의 명령문들은 실행이 되지 않는다.
            //11. visit[1]은 방문을 하지 않았으므로 if문 안의 명령문들이 실행된다.
            //19. depth가 1이고 i가 2인 상황, visit[2]는 방문하지 않았으므로 if문 안의 명령문들이 실행된다.
            //30. visit[1]이 false이므로 if문이 실행된다.
            if(!visit[i]){
                //해당 노드를 방문하고
                //4. 노드 0을 방문했으므로 visit[0]을 true로 바꿔준다.
                //12. 노드 1을 방문했으므로 visit[1]을 true로 바꿔준다.
                //20. 노드 2를 방문했으므로 visit[2]를 true로 바꿔준다.
                //31. 노드 1을 방문했으므로 visit[1]을 true로 바꿔준다.
                visit[i] = true;
                //해당 노드의 깊이에는 i+1(배열은 0부터 시작하지만 원하는 숫자는 1부터 시작한다)을 넣어준다.
                //여기서 깊이는 수열의 위치를 의미함
                //5. 깊이 0(arr 배열의 인덱스 0)에 1
                //(i는 수열에 들어갈 숫자를 의미하는데, i는 0부터 시작하고 수열의 숫자는 1부터 시작하니까 1을 더해줘야 한다)을 넣어준다.
                //13. 깊이 1(arr 배열의 인덱스 1)에 2
                //(i는 수열에 들어갈 숫자를 의미하는데, i는 0부터 시작하고 수열의 숫자는 1부터 시작하니까 1을 더해줘야 한다)을 넣어준다.
                //21. 깊이 1(arr 배열의 인덱스 1)에 3
                //(i는 수열에 들어갈 숫자를 의미하는데, i는 0부터 시작하고 수열의 숫자는 1부터 시작하니까 1을 더해줘야 한다)을 넣어준다.
                //32. 깊이 0(arr 배열의 인덱스 1)에 2
                //(i는 수열에 들어갈 숫자를 의미하는데, i는 0부터 시작하고 수열의 숫자는 1부터 시작하니까 1을 더해줘야 한다)을 넣어준다.
                arr[depth] = i + 1;
                //해당 노드의 자식 노드를 탐색함
                //6. 그 다음 인덱스인 1을 탐색하기 위해 재귀를 사용한다.
                //14. 그 다음 인덱스인 2를 탐색하기 위해 재귀를 사용한다.
                //22. 그 다음 인덱스인 2를 탐색하기 위해 재귀를 사용한다.
                //33. 그 다음 인덱스인 1을 탐색하기 위해 재귀를 사용한다.
                dfs(depth+1);
                //탐색이 끝나면 방문했던 노드들을 차례대로 방문하지 않았음으로 돌려준다.
                //18. visit[1]의 값을 false로 바꾼다.
                //26. visit[1]의 값을 false로 바꾼다.
                //28. visit[0]의 값을 false로 바꾼다.
                visit[i] = false;
            }
        }
    }
}
