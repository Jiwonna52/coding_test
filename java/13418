import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;


public class Main {

    public static int[] parent;
    public static int count;

    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] s = br.readLine().split(" ");
        int N = Integer.parseInt(s[0]);
        int M = Integer.parseInt(s[1]);
        int[][] R = new int[M+1][3];
        int start, end, road;
        parent = new int[N+1];
        count = 0;
        int max = 0;
        int min = 0;
        boolean flag = false;

        String[] first = br.readLine().split(" ");
        road = Integer.parseInt(first[2]);

        if(road == 0){ //오르막이면 오르막을 세준다
            count++;
            flag = true;
        }

        for(int i=0; i<M; i++){
            String[] tmp = br.readLine().split(" ");
            start = Integer.parseInt(tmp[0]);
            end = Integer.parseInt(tmp[1]);
            road = Integer.parseInt(tmp[2]);

            R[i][0] = start;
            R[i][1] = end;
            R[i][2] = road;
        }

        Arrays.sort(R, (int[] r1, int[] r2) ->  r1[2] - r2[2]);
        kruskal(N, R);
        max = (int)Math.pow(count, 2);

        if(flag){
            count = 1;
        }else{
            count = 0;
        }

        Arrays.sort(R, (int[] r1, int[] r2) ->  r2[2] - r1[2]);
        kruskal(N, R);
        min = (int)Math.pow(count, 2);

        System.out.println(max - min);

        return;
    }

    public static void kruskal(int N, int arr[][]){
        int start, end, road;

        for(int i=0; i<=N; i++){
            parent[i] = i;
        }

        for(int i=0; i<arr.length; i++){
            start = arr[i][0];
            end = arr[i][1];
            road = arr[i][2];

            int startParent = find(start);
            int endParent = find(end);

            if(startParent == endParent){
                continue;
            }

            if(road == 0){
                count++;
            }

            //System.out.println("시작 " + start + " 끝 " + end);
            parent[endParent] = startParent;

        }
    }
    public static int find(int node){
        if(parent[node] == node){
            return node;
        }

        return parent[node] = find(parent[node]);
    }

}
