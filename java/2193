import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Main {
	
    //이친수의 경우 제일 앞의 두 수가 10으로 고정되어 있고 N-2의 수를 추가한다는 생각을 전제로 함.
	public static void main(String[] args)throws IOException{
		 BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		 
		 int N = Integer.parseInt(br.readLine());
        //뒤로 갈수록 수가 많아져 long형으로 써야 한다. 그렇지 않으면 틀렸다고 나옴.
		 long[][] dp = new long[91][3];
		
        //N-2의 수 중 길이가 1이고 0으로 끝나는 수 {0}, 길이가 1이고 1로 끝나는 수 {1}
		 dp[1][0] = 1;
		 dp[1][1] = 1; 
		 
		//N-2의 수를 구해주는 데, 0으로 끝난 경우 끝 수가 0과 1이 와도 상관이 없지만,
        //1로 끝난 경우 끝 수가 1이 오면 이친수의 조건 2에 위배된다.
        //그러므로 1로 끝날 경우에는 0으로 끝나는 경우의 수만 더해준다.
		 for(int i=2; i<91; i++) {
			 dp[i][0] = dp[i-1][1] + dp[i-1][0];
			 dp[i][1] = dp[i-1][0];
		 }
		 
        //길이가 1과 2일 경우에는 값이 1이다.
        //N-2를 해줄 건데 조건을 해주지 않을 경우 배열 오류가 나고 엉뚱한 값이 나올 수 있다.
        //N이 2보다 클 경우 만들어 두었던 N-2의 갯수를 더해주면 된다.
		 if(N == 1 || N == 2) {
			 System.out.println(1);
		 }else {
			 System.out.println(dp[N-2][0] + dp[N-2][1]);
		 }
		 
	}
}
