import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

class pair{
    int count;
    int num;

    pair(int count, int num){
        this.count = count;
        this.num = num;
    }
}

public class Main {

    public static int r, c, k;
    public static int[][] arr;


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        r = Integer.parseInt(st.nextToken())-1;
        c = Integer.parseInt(st.nextToken())-1;
        k = Integer.parseInt(st.nextToken());
        int time = 0;

        arr = new int[3][3];

        for(int i=0; i<3; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<3; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
         }

        while(true){

            if(time > 100){
                System.out.println("-1");
                break;
            }

            if(r < arr.length && c < arr[0].length){
                if(arr[r][c] == k){
                    System.out.println(time);
                    break;
                }
            }


            if(arr.length >= arr[0].length){
                R(arr);
            }else{
                C(arr);
            }

            time++;
        }


    }

    public static void deepCopy(int[][] copyArr){

        arr = new int[copyArr.length][copyArr[0].length];
        for(int i=0; i<copyArr.length; i++){
            for(int j=0; j<copyArr[0].length; j++){
                arr[i][j] = copyArr[i][j];
            }
        }

    }


    public static void makeArrR(ArrayList<ArrayList<pair>> tmpList){
        int maxSize = 0;
        for(int i=0; i<tmpList.size(); i++){
            if(maxSize < tmpList.get(i).size()){
                maxSize = tmpList.get(i).size();
            }
        }


        int[][] newArr = new int[tmpList.size()][maxSize*2];

        for(int i=0; i<tmpList.size(); i++){
            int index = 0;
            for(int j=0; j < tmpList.get(i).size(); j++){
                newArr[i][index] = tmpList.get(i).get(j).num;
                newArr[i][index+1] = tmpList.get(i).get(j).count;
                index += 2;
            }
        }

        deepCopy(newArr);
    }

    public static void makeArrC(ArrayList<ArrayList<pair>> tmpList){
        int maxSize = 0;
        for(int i=0; i<tmpList.size(); i++){
            if(maxSize < tmpList.get(i).size()){
                maxSize = tmpList.get(i).size();
            }
        }


        int[][] newArr = new int[maxSize*2][tmpList.size()];

        for(int i=0; i<tmpList.size(); i++){
            int index = 0;
            for(int j=0; j < tmpList.get(i).size(); j++){
                newArr[index][i] = tmpList.get(i).get(j).num;
                newArr[index+1][i] = tmpList.get(i).get(j).count;
                index += 2;
            }
        }
        deepCopy(newArr);
    }

    //행을 기준으로 정렬
    public static void R(int[][] arr){
        ArrayList<ArrayList<pair>> tmpList = new ArrayList<>();

        for(int i=0; i<arr.length; i++) {
            Map<Integer, Integer> map = new HashMap<>();

            for(int j=0; j<arr[0].length; j++){
                if(arr[i][j] == 0){
                    continue;
                }

                map.put(arr[i][j], map.getOrDefault(arr[i][j], 0)+1);
            }

            ArrayList<pair> list = new ArrayList<>();
            for(int key : map.keySet()){
                list.add(new pair(map.get(key), key));
            }

            Collections.sort(list, (o1, o2) -> {
                if(o1.count == o2.count){
                    return o1.num - o2.num;
                }
                return o1.count - o2.count;
            });
            tmpList.add(list);
        }

        makeArrR(tmpList);

    }

    public static void C(int[][] arr){
        ArrayList<ArrayList<pair>> tmpList = new ArrayList<>();

        for(int i=0; i<arr[0].length; i++) {
            Map<Integer, Integer> map = new HashMap<>();

            for(int j=0; j<arr.length; j++){
                if(arr[j][i] == 0){
                    continue;
                }

                map.put(arr[j][i], map.getOrDefault(arr[j][i], 0)+1);
            }

            ArrayList<pair> list = new ArrayList<>();
            for(int key : map.keySet()){
                list.add(new pair(map.get(key), key));
            }


            Collections.sort(list, (o1, o2) -> {
                if(o1.count == o2.count){
                    return o1.num - o2.num;
                }
                return o1.count - o2.count;
            });

            tmpList.add(list);
        }

        makeArrC(tmpList);

    }

}
