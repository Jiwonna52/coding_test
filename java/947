class Solution {
    //행과 열이 하나라도 같으면 서로 연결되어 있다고 생각한다.
    //두 돌이 연관되어 있을 경우 하나만 지워주므로 돌은 최소 한 개 이상과 연결되어 있어야 한다
    //결국에는 하나가 남는다
    boolean check(int[] i, int[] j){
        //행 혹은 열이 같을 경우
        if(i[0] == j[0] || i[1] == j[1]){
            return true;
        }
        return false;
     }

     void dfs(boolean[] visit, int stone, List<Integer>[] stone_list){
         visit[stone] = true;

         for(int i : stone_list[stone]){
             if(!visit[i]){
                 dfs(visit, i, stone_list);
             }
         }
     }

    public int removeStones(int[][] stones) {
        List<Integer>[] list = new ArrayList[stones.length];
        boolean[] visit = new boolean[stones.length];
        int answer = 0;

        for(int i=0; i<stones.length; i++){
            list[i] = new ArrayList<Integer>();
        }

        for(int i=0; i<stones.length; i++){
            for(int j=i+1; j<stones.length; j++){
                if(check(stones[i], stones[j])){
                    list[i].add(j);
                    list[j].add(i);
                }
            }
        }

        //서로 연관이 되어 있는 돌들을 탐색
        for(int i=0; i<visit.length; i++){
            if(!visit[i]){
                dfs(visit, i, list);
                answer++;
                
            }
        }

        return stones.length - answer;
    }
}
