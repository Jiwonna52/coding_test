class Solution {
    
    public static boolean[] visit;
    public static int[] arr;
    public static int[] num;
    public static int tmp_answer;
    
    public int solution(int[] nums) {
        tmp_answer = 0;

        visit = new boolean[nums.length];
        arr = new int[3];
        num = nums;

        dfs(0, 0);

        return tmp_answer;
    }
    
    public static void dfs(int at, int depth){
        if(depth == 3){
            int sum = 0;
            boolean b= true;
            for(int tmp : arr){
                sum += tmp;
            }
            //1과 자기자신 외에 나눠떨어지는 값이 있다면 이는 소수가 아니다.
            for(int i=2; i<sum; i++){
                if(sum%i == 0){
                    b = false;
                    break;
                }
            }
            //소수인 것만 tmp_answer에다가 ++해준다.
            if(b){
                tmp_answer++;
            }
            return;
        }
        
        //재귀함수로 길이가 3인 배열을 만들어 준다.
        //숫자의 중복을 피해야 하니까 at을 넣어서 뒤에 있는 것만 가지고 오도록 한다.
        for(int i=at; i<num.length; i++){
            if(!visit[i]){
                visit[i] = true;
                arr[depth] = num[i];
                dfs(i+1, depth+1);
                visit[i] = false;
            }
        }
    }
}
