import java.util.*;

class Solution {
    public int solution(int[] picks, String[] minerals) {
        int answer = 0;
        int a = minerals.length/5;
        int b = minerals.length%5;
        int index = 0;
        int[][] section;
        int picksNum = picks[0] + picks[1] + picks[2];
        
        //각 곡괭이 별 피로도
        if(b == 0){
            section = new int[a][3];
        }else{
            section = new int[a+1][3];
        }
        
        for(int i=0; i<a; i++){
            for(int j=index; j<index+5; j++){
                char m = minerals[j].charAt(0);
                if(m == 'd'){
                    section[i][0] += 1;
                    section[i][1] += 5;
                    section[i][2] += 25;
                }else if(m == 'i'){
                    section[i][0] += 1;
                    section[i][1] += 1;
                    section[i][2] += 5;
                }else if(m == 's'){
                    section[i][0] += 1;
                    section[i][1] += 1;
                    section[i][2] += 1;
                }
            }
            index += 5;
        }
        
        if(b != 0){
            for(int i=index; i<minerals.length; i++){
                char m = minerals[i].charAt(0);
                if(m == 'd'){
                    section[a][0] += 1;
                    section[a][1] += 5;
                    section[a][2] += 25;
                }else if(m == 'i'){
                    section[a][0] += 1;
                    section[a][1] += 1;
                    section[a][2] += 5;
                }else if(m == 's'){
                    section[a][0] += 1;
                    section[a][1] += 1;
                    section[a][2] += 1;
                }
            }
        }
        
        if(section.length > picksNum){
            for(int i=picksNum; i<section.length; i++){
                section[picksNum][0] = 0;
                section[picksNum][1] = 0;
                section[picksNum][2] = 0;
            }
        }
        //돌 -> 철 -> 다이아 순으로 정렬
        Arrays.sort(section, (o1, o2) ->{
            if(o1[2] == o2[2]){
                return o2[1]-o1[1];
            }else if(o1[2] == o2[2] && o1[1] == o2[1]){
                return o2[0] - o1[0];
            }
            return o2[2] - o1[2];
        });
        
        for(int i=0; i<section.length; i++){
            System.out.println(section[i][0] + " " + section[i][1] + " " + section[i][2]);
        }
        
        index = 0;
        boolean flag = true;
        //각 곡괭이를 돌면서 하나씩 빼줌
        for(int i=0; i<3; i++){
            int pick = picks[i];
            while(pick != 0){
                if(index >= section.length){
                    flag = false;
                    break;
                }
                answer += section[index][i];
                pick -= 1;
                index += 1;
            }
            
            if(!flag){
                break;
            }
        }
        
        
        return answer;
    }
}
