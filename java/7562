import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.*;

class pair{
    int x;
    int y;
    pair(int x, int y){
        this.x = x;
        this.y = y;
    }
}
public class Main {

    public static boolean[][] visit;
    public static int[][] count;
    public static int[] end;
    public static int[] nr = { -1, -2, -2, -1, 1, 2, 2, 1};
    public static int[] nc = {-2, -1, 1, 2, 2, 1, -1, -2};
    public static int I;

    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine());

        for(int i=0; i<T; i++){
            I = Integer.parseInt(br.readLine());
            visit = new boolean[I][I];
            count = new int[I][I];
            end = new int[2];
            String[] begin = br.readLine().split(" ");
            String[] s_end = br.readLine().split(" ");
            end[0] = Integer.parseInt(s_end[0]);
            end[1] = Integer.parseInt(s_end[1]);
            BFS(Integer.parseInt(begin[0]), Integer.parseInt(begin[1]));
        }


    }

    static public void BFS(int x, int y) {
        Queue<pair> queue = new LinkedList<pair>();
        queue.add(new pair(x, y));
        count[x][y] = 0;

        while(!queue.isEmpty()){
            pair p = queue.poll();
            int xp = p.x;
            int yp = p.y;

            if(xp == end[0] && yp == end[1]){
                System.out.println(count[xp][yp]);
                return;
            }

            for(int i=0; i<8; i++){
                int nextx = xp + nr[i];
                int nexty = yp + nc[i];

                if(nextx >= 0 && nexty >= 0 && nextx < I && nexty < I && !visit[nextx][nexty]){
                        queue.add(new pair(nextx, nexty));
                        visit[nextx][nexty] = true;
                        count[nextx][nexty] = count[xp][yp] + 1;
                }

            }
        }
    }
}
