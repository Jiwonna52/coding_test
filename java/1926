class pair{
    int r;
    int c;
    int step;

    pair(int r, int c, int step){
        this.r = r;
        this.c = c;
        this.step = step;
    }
}

class Solution {
    //상하좌우
    public static int[] row = new int[] {-1, 1, 0, 0};
    public static int[] col = new int[] {0, 0, -1, 1};
    public static int LR;
    public static int LC;


    public int nearestExit(char[][] maze, int[] entrance) {
        int answer;
        LR = maze.length;
        LC = maze[0].length;

        System.out.println(LR + " " + LC);

        answer = bfs(entrance[0], entrance[1], maze);

        return answer;
    }

    public int bfs(int startR, int startC, char[][] maze){
        Queue<pair> queue = new LinkedList<>();
        queue.add(new pair(startR, startC, 0));
        maze[startR][startC] = '+';

        while(!queue.isEmpty()){
            pair p = queue.poll();
            int cR = p.r;
            int cC = p.c;
            int cStep = p.step;

            for(int i=0; i<4; i++){
                int nR = cR + row[i];
                int nC = cC + col[i];
                int nStep = cStep + 1;

                if(nC >= 0 && nC < LC && nR >= 0 && nR < LR){
                    if(maze[nR][nC] == '.'){                   
                        if(nR == 0 || nR == LR-1 || nC == 0 || nC == LC-1){
                            return nStep;
                        }
                        maze[nR][nC] = '+';
                        queue.add(new pair(nR, nC, nStep));
                    }

            }
        }
        }
        return -1;

    }

}
