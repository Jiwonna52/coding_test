//다익스트라가 아니라 다이나믹 프로그래밍이었음

class Solution {
    
    public static int INF = 99999999;
    public int solution(int n, int m, int[][] edge_list, int k, int[] gps_log) {
        int answer = 0;
        int[][] map = new int[n+1][n+1];
        int[][] dp = new int[k][n+1];
        
        for(int i=0; i<m; i++){
            int a = edge_list[i][0];
            int b = edge_list[i][1];
            
            map[a][b] = 1;
            map[b][a] = 1;
        }
        
        for(int i=0; i<k; i++){
            for(int j=0; j<=n; j++){
                dp[i][j] = INF;
            }
        }
        
        //첫 번째 값은 시작이기 때문에 0
        dp[0][gps_log[0]] = 0;
        
        //i는 gps_long의 인덱스를 의미하고 j는 해당 인덱스의 노드를 의미한다.
        //인덱스 0은 어차피 시작하는 부분이라 탐색할 필요 없다.
        for(int i=1; i<k; i++){
            for(int j=1; j<=n; j++){    
                for(int node=1; node<=n; node++){
                    //길이 있으면
                    if(map[j][node] == 1){
                        //현재 값과 직전의 값을 비교해 더 작은 것을 넣어준다.
                        //dp[1][2]는 인덱스 1의 노드가 2를 의미
                        //이는 dp[0][1], dp[0][3], dp[0][4]에서 왔다는 것을 의미
                        //위의 세 가지 경우의 수 중 가장 작은 것을 찾아서 값을 넣으면 된다.
                        dp[i][j] = Math.min(dp[i][j], dp[i-1][node]);
                    }
                }
                
                //만일 노드가 변경됐다면 길을 하나 더 지나간 것이므로 ++를 해준다.
                if(j != gps_log[i]){
                    dp[i][j]++;
                }
                
            }
        }
        
        if(dp[k-1][gps_log[k-1]] < INF){
            return dp[k-1][gps_log[k-1]];
        }
        return -1;
    }
}
