import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

class pair{
    int x;
    int y;
    pair(int x, int y){
        this.x = x;
        this.y = y;
    }
}
public class Main {

    public static int[][] map;
    public static int[][] count;
    public static int[] nr = { -1, 1, 0,  0};
    public static int[] nc = {0, 0, -1, 1};
    public static int N;
    public static int M;
    public static Queue<pair> tomato;

    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        M = Integer.parseInt(st.nextToken());
        N = Integer.parseInt(st.nextToken());
        tomato = new LinkedList<>();

        map = new int[N][M];
        count = new int[N][M];

        //
        for(int i=0; i<N; i++){
            String[] s = br.readLine().split(" ");
            for(int j=0; j<s.length; j++){
                map[i][j] = Integer.parseInt(s[j]);
                count[i][j] = Integer.parseInt(s[j]);
                //토마토의 위치를 넣어준다.
                if(map[i][j] == 1){
                    tomato.add(new pair(i, j));
                }
            }
        }

        System.out.println(BFS());

    }

    static public int BFS() {

        while(!tomato.isEmpty()){
            pair p = tomato.poll();
            int xp= p.x;
            int yp = p.y;

            for(int i=0; i<4; i++){
                int nextx = xp + nr[i];
                int nexty = yp + nc[i];

                //찾는 위치에 있는 값이 범위에 소속되고 있고 아직 익지 않은 토마토일 떼
                if(nextx >= 0 && nexty >= 0 && nextx < N && nexty < M){
                    if(map[nextx][nexty] == 0){
                        //찾는 위치를 넣어주고 토마토가 익었음을 표시한다.
                        //그리고 해당 토마토까지 가는 것에 대한 순서를 계산해서 넣어준다.
                        tomato.add(new pair(nextx, nexty));
                        map[nextx][nexty] = 1;
                        count[nextx][nexty] = count[xp][yp] + 1;

                    }
                }
            }
        }

        int result = Integer.MIN_VALUE;

        //최대값이 총 일수이다.
        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(count[i][j] == 0){
                    //만일 익지 않은 토마토가 있다면 토마토가 모두 익지 않은 상황이라 -1을 반환한다.
                    return -1;
                }
                result = Math.max(result, count[i][j]);
            }
        }

        //결과가 1이라면 이는 모든 토마토가 익어서 왔다는 의미니까 0을 반환한다.
        if(result == 1){
            return 0;
        }else{
            return result - 1;
        }
    }
}
