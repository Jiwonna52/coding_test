import java.util.LinkedList;
import java.util.Queue;
import java.util.List;
import java.util.ArrayList;

class Solution {
    public int[] solution(int[] progresses, int[] speeds) {
        int[] answer;
        Queue<Integer> queue = new LinkedList<>();
        List<Integer> list = new ArrayList<>();
        int count = 1;
        int idx = 0;
        int first = 0;
        int cnt = 0;

        for(int i=0; i<progresses.length; i++){
            int left = 100 - progresses[i];
            cnt = 0;

            while(left > 0){
                left -= speeds[i];
                cnt++;
            }

            queue.add(cnt);
        }

        first = queue.poll();

        while(queue.size() != 0){
            if(first >= queue.peek()){
                queue.remove();
                count++;
            }else{
                System.out.println(count);
                list.add(count);
                count = 1;
                first = queue.poll();
            }
        }

        list.add(count);
        answer = new int[list.size()];

        for(int tmp : list){
            answer[idx] = tmp;
            idx++;
        }

        return answer;
    }
}
