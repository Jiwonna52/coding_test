import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    public static List<Integer>[] map;
    public static boolean[] visit;
    public static int N;
    public static int[] answer;


    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String arr = "";
        N = Integer.parseInt(br.readLine());
        answer = new int[N];
        visit = new boolean[N+1];

        map = new ArrayList[N+1];
        for(int i=0; i<N+1; i++){
            map[i] = new ArrayList<>();
        }

        for(int i=0; i<N-1; i++){
            StringTokenizer st = new StringTokenizer(br.readLine(), " ");
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            map[a].add(b);
            map[b].add(a);
        }

        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        for(int i=0; i<N; i++){
            answer[i] = Integer.parseInt(st.nextToken());
        }

        if(answer[0] != 1){
            System.out.println("0");
            return;
        }

        if(BFS()){
            System.out.println("1");
        }else{
            System.out.println("0");
        }


        return;
    }

    static public boolean BFS() {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(1);
        visit[1] = true;
        int idx = 1; //방문한 노드들의 갯수를 저장하는 변수
        HashSet<Integer> set = new HashSet<>();

        while(!queue.isEmpty()){
            set.clear();
            int current = queue.poll();

            //현재 노드와 연결된 노드들을 set에 넣어준다.
            for(int next : map[current]){
                if(visit[next]){
                    continue;
                }
                set.add(next);
                visit[next] = true;
            }

            int size = set.size();

            //노드의 순서는 그래프의 깊이 대로 나온다.
            //set에 해당 정답이 없다는 것은 주어진 순서가 잘못됐다는 것을 의미한다.
            for(int i=idx; i<idx+size; i++){
                if(set.contains(answer[i])){
                    queue.add(answer[i]);
                }else{
                    return false;
                }
            }
            idx += size;

        }
        return true;
   }
}
