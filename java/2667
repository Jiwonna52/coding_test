import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

public class Main {
    public static int N;
    public static int[][] map;
    public static boolean[][] visit;
    //상하좌우
    public static int[] dr = {-1, 1, 0, 0};
    public static int[] dc = {0, 0, -1, 1};
    public static List<Integer> list;
    public static int count;

    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        map = new int[N][N];
        visit = new boolean[N][N];
        list = new ArrayList<>();
        count = 0;

        for(int i=0; i<N; i++){
            String tmp = br.readLine();
            for(int j=0; j<N; j++){
                map[i][j] = tmp.charAt(j) - '0';
            }
        }

        for(int i=0; i<N; i++){
            for(int j=0; j<N; j++){
                if(map[i][j] == 1 && !visit[i][j]){
                    count = 1;
                    dfs(i, j);
                    list.add(count);
                }
            }
        }

        Collections.sort(list);
        System.out.println(list.size());
        for(int a : list){
            System.out.println(a);
        }
    }

    //넓이 우선 탐색
    public static int dfs(int x, int y){
        visit[x][y] = true;

        for(int i=0; i<4; i++){
            //상하좌우를 각각 탐색한다.
            int nx = x + dr[i];
            int ny = y + dc[i];

            //만일 좌표가 전부 map에 속해있고 해당 map에 길이 있으며 방문을 하지 않았으면 dfs 탐색을 한다.
            //탐색을 마친 후에 count를 ++한다.
            if(nx >= 0 && ny >= 0 && nx < N &&  ny < N){
                if(map[nx][ny]==1 && !visit[nx][ny]){
                    dfs(nx, ny);
                    count++;
                }
            }
        }
        return count;
    }

}
