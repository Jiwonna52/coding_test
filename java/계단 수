import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        //[n][k][visit], n번째의 위치에 k라는 수가올 때 visit에 있는 1만큼 방문함
        //visit 부분의 크기는 1을 왼쪽으로 10만큼 이동
        long[][][] dp = new long[101][10][1 << 10];
        int mod = 1000000000;
        long answer = 0;

        //초기 값
        //첫 번째 위치에 i라는 숫자가 올 때 i번째 숫자가 방문했다는 것을 표시
        for(int i=1; i<10; i++){
            dp[1][i][1<<i] = 1;
        }

        //dp[i][j][k | (1<<j)] = dp[i-1][j-1][k] + dp[i-1][j+1][k]
        for(int i=2; i<=n; i++){
            for(int j=0; j<10; j++){
                for(int k=0; k<(1 << 10); k++){
                    int visit = k|(1<<j);
                    if(j == 0){
                        //j가 0일 경우 양 옆에는 1밖에 못 온다.
                        dp[i][j][visit] += (dp[i-1][j+1][k]%mod);
                    }else if(j == 9){
                        //j가 9일 경우 양 옆에는 8밖에 못 온다.
                        dp[i][j][visit] += (dp[i-1][j-1][k]%mod);
                    }else{
                        dp[i][j][visit] += ((dp[i-1][j-1][k]%mod) + (dp[i-1][j+1][k]%mod));
                    }
                    dp[i][j][visit] %= mod;
                }
            }
        }

        for(int i=0; i<10; i++){
            answer += dp[n][i][(1 << 10) - 1]%mod;
            answer %= mod;
        }

        System.out.println(answer);


    }
}
