import java.util.*;

class pair{
    int y;
    int x;
    int dir;
    
    pair(int y, int x, int dir){
        this.y = y;
        this.x = x;
        this.dir = dir;
    }
}

class Solution {
    
    private static int[] dy = {-1, 1, 0, 0}; //상하좌우
    private static int[] dx = {0, 0, -1, 1};
    private static int[][][] count;
    private static int[][] map;
    private static int length;
    private static int answer;
    
    public int solution(int[][] board) {
        answer = 0;
        length = board.length;
        count = new int[4][length][length];
        map = board;
        
        
        for(int i=0; i<length; i++){
            for(int j=0; j<length; j++){
                count[0][i][j] = Integer.MAX_VALUE;
                count[1][i][j] = Integer.MAX_VALUE;
                count[2][i][j] = Integer.MAX_VALUE;
                count[3][i][j] = Integer.MAX_VALUE;
            }
        }
        
        bfs();
        answer = Integer.MAX_VALUE;
        for(int i=0; i<4; i++){
            answer = answer>count[i][length-1][length-1] ? count[i][length-1][length-1] : answer;
        }
        
        return answer;
    }
    
    public static void bfs(){
        Queue<pair> queue = new LinkedList<>();
        if(map[0][1] != 1){
            count[3][0][1] = 100;
            queue.add(new pair(0, 1, 3));
        }
        if(map[1][0] != 1){
            count[1][1][0] = 100;
            queue.add(new pair(1, 0, 1));
        }
        
        while(!queue.isEmpty()){
            pair p = queue.poll();
            int cy = p.y;
            int cx = p.x;
            int cdir = p.dir;
            
            for(int i=0; i<4; i++){
                int ny = cy + dy[i];
                int nx = cx + dx[i];
                int ndir = i;
                
                if(ny >= 0 && ny < length && nx >= 0 && nx < length){
                    if(map[ny][nx] != 1){
                        if(cdir == ndir){
                            //방향이 같은 경우
                            if(count[ndir][ny][nx] > count[cdir][cy][cx] + 100){
                                count[ndir][ny][nx] = count[cdir][cy][cx] + 100;
                                queue.add(new pair(ny, nx, ndir));
                            }
                        }else{
                            if(count[ndir][ny][nx] > count[cdir][cy][cx] + 600){
                                count[ndir][ny][nx] = count[cdir][cy][cx] + 600;
                                queue.add(new pair(ny, nx, ndir));
                            }
                        }

                    }
                }
            }
            
            
        }
        
    }
}
