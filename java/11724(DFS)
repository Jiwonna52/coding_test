import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.util.Queue;

public class Main {
    public static int[][] link;
    public static boolean[] visit;
    public static int[] node;
    public static int N;
    public static int M;

    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        int answer = 0;

        link = new int[1001][1001];
        node = new int[N+1];
        visit = new boolean[1001];

        for(int i=0; i<M; i++){
            String[] num = br.readLine().split(" ");
            int a = Integer.parseInt(num[0]);
            int b = Integer.parseInt(num[1]);
            link[a][b] = 1;
            link[b][a] = 1;
        }

        //노드가 끊어진 부분을 신경써줘야 하기 때문에 각 노드를 검사해준다.
        //민일 방문하지 않은 노드가 존재한다면 이는 끊어진 노드를 의미하기 때문에 해당 노드에 dfs를 해줘야 한다.
        for(int i=1; i<=N; i++){
            if(!visit[i]){
                dfs(i);
                answer++;
            }
        }

        System.out.println(answer);

    }

    //깊이 우선 탐색(한쪽 루트를 전부 타고 내려갔다가 막다른 길이 나오면 위로 올라가는 방식)
    public static void dfs(int current){

        //현재 노드와 연결된 노드 중 방문하지 않은 노드가 존재한다면 방문하지 않은 노드를 방문으로 표시하고 그 노드를 dfs로 탐색해준다.
        for(int i=1; i<=N; i++){
            if(link[current][i] == 1 && !visit[i]){
                visit[i] = true;
                dfs(i);
            }
        }
    }


}
