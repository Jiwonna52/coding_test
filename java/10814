import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.StringTokenizer;


public class Main {

	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		int N = Integer.parseInt(br.readLine());
		int[][] age = new int[N][2];
		String[] name = new String[N];

		/**
		 * age[i][0]에는 나이를 age[i][1]에는 idx를 저장하도록 한다.
		 * name[i]에는 이름을 저장한다. 여기서 name의 인덱스의 age[i][1]과 같다.
		 */
		for(int i=0; i<N; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int a = Integer.parseInt(st.nextToken());
			String n = st.nextToken();
			age[i][0] = a;
			age[i][1] = i;
			name[i] = n;
		}
		
		/**
		 * 람다식을 사용
		 * e1과 e2의 길이가 같을 경우 e1[1] - e2[1]을 이용해 인덱스를 오름차순으로 정렬한다.
		 * 어차피 인덱스는 0부터 점점 커지기 때문에 들어온 순서가 인덱스의 오름차순이다.
		 * 만일 길이가 다르다면 나이 순으로 정렬한다.
		 * java는 오름차순으로 정렬을 하기에 음수가 나오면 뒤에 있는 문자 e2의 길이가 길다는 뜻이기에 값을 바꾸지 않고
		 * 양수가 나오면 앞의 길이가 길다는 뜻이기에 값을 바꾼다. 
		 */
		Arrays.sort(age, (e1, e2) -> {
			if(e1[0] ==e2[0]) {
				return e1[1] - e2[1];
			}else {
				return e1[0]-e2[0];
			}
		});
		
		/**
		 * 먼저 나이를 출력하고 해당 나이의 idx와 같은 name의 인덱스 값을 찾아 출력한다.
		 */
		for(int i=0; i<N; i++) {
			System.out.println(age[i][0] + " " + name[age[i][1]]);
		}

	}
}
