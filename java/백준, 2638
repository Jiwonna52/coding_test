import java.util.*;
import java.io.*;

class Pair {
    int r;
    int c;

    Pair(int r, int c) {
        this.r = r;
        this.c = c;
    }
}

public class Main {
    public static int n, m;
    public static int[][] map;
    public static int[] dR = {-1, 0, 1, 0};
    public static int[] dC = {0, 1, 0, -1};

    // 빈칸을 기준으로 처음 만나는 치즈가 외벽이다.
    public static void bfs() {
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(0, 0));
        boolean[][] visit = new boolean[n][m];
        int[][] count = new int[n][m];

        while(!queue.isEmpty()) {
            Pair current = queue.poll();
            int cR = current.r;
            int cC = current.c;

            for (int i=0; i<4; i++) {
                int nR = cR + dR[i];
                int nC = cC + dC[i];

                if (nR >= 0 && nR < n && nC >= 0 && nC < m) {
                    if (!visit[nR][nC]) {
                        if (map[nR][nC] == 0) {
                            visit[nR][nC] = true;
                            queue.add(new Pair(nR, nC));
                        } else {
                            count[nR][nC] += 1;
                        }
                    }
                }
            }
        }

        melt(count);
    }

    public static void melt(int[][] count) {
        for (int i=0; i<n; i++) {
            for (int j=0; j<m; j++) {
                if (count[i][j] >= 2) {
                    map[i][j] = 0;
                }
            }
        }
    }

    public static boolean checkIfFinish() {
        for (int i=0; i<n; i++) {
            for (int j=0; j<m; j++) {
                if (map[i][j] == 1) {
                    return false;
                }
            }
        }

        return true;
    }


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        map = new int[n][m];
        int answer = 0;

        for (int i=0; i<n; i++) {
            st = new StringTokenizer(br.readLine(), " ");
            for (int j=0; j<m; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        while(!checkIfFinish()) {
            bfs();
            answer++;
        }

        System.out.println(answer);
    }

}
