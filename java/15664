import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
import java.util.Arrays;
import java.util.LinkedHashSet;

public class Main {
    public static int N;
    public static int M;
    public static int[] arr;
    public static int[] answer;
    public static boolean[] visit;

    //순서를 관리하는 LinkedHashSet을 이용해야 한다.
    //HashSet은 순서를 관리하지 않아서 사용할 수가 없다.
    public static LinkedHashSet<String> set = new LinkedHashSet();


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        arr = new int[N];
        answer = new int[M];
        visit = new boolean[N];

        StringTokenizer st2 = new StringTokenizer(br.readLine(), " ");
        for (int i = 0; i < N; i++) {
            arr[i] = Integer.parseInt(st2.nextToken());
        }

        Arrays.sort(arr);
        dfs(0, 0);
        set.forEach(System.out::println);
    }

    public static void dfs(int at, int depth){
        //종료 조건
        if(depth == M){
            //sb를 전역 변수로 설정했던 이유는 한 번에 모든 수열을 받아서 출력하는 방식이었지만
            //이번에는 각 수열마다 LinkedHashSet에 넣어줘야 하니까 sb를 새롭게 만들어줘야 한다.
            StringBuilder sb = new StringBuilder();
            for(int tmp : answer){
                sb.append(tmp).append(" ");
            }
            set.add(sb.toString());
            return;
        }

        for(int i=at; i<N; i++){
            if(!visit[i]){
                visit[i] = true;
                answer[depth] = arr[i];
                dfs(i+1, depth+1);
                visit[i] = false;
            }
        }
    }

}
