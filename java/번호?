import java.io.*;
import java.util.*;

class pair{
    int row;
    int col;

    pair(int row, int col){
        this.row = row;
        this.col = col;
    }
}

public class Main {
public static int[][] map;
public static boolean[][] visit;
public static int[] r = {-1, 1, 0, 0};//상하좌우
public static int[] c = {0, 0, -1, 1};

    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int N = Integer.parseInt(br.readLine());
        map = new int[N+1][N+1];
        visit = new boolean[N+1][N+1];
        int max = 0;
        int count = 0;
        int max_count = 0;

        for(int i=1; i<=N; i++){
            String[] s = br.readLine().split(" ");

            for(int j=1; j<=N; j++){
                map[i][j] = Integer.parseInt(s[j-1]);
                if(map[i][j] > max){
                    max = map[i][j];
                }
            }
        }

        for(int i=0; i <= max; i++){
            visit = new boolean[N+1][N+1];
            make(i, N);
            count = 0;

            for(int j=1; j<=N; j++){
                for(int k=1; k<=N; k++){
                    if(!visit[j][k]){
                        count++;
                        BFS(j, k, N);
                    }
                }
            }

            if(count > max_count){
                max_count = count;
            }
        }

        System.out.println(max_count);



        return;
    }

    private static void BFS(int sR, int sC, int N){
        Queue<pair> queue = new LinkedList<>();
        queue.add(new pair(sR, sC));
        visit[sR][sC] = true;

        while(!queue.isEmpty()) {
            pair p = queue.poll();
            int cR = p.row;
            int cC = p.col;

            for (int i = 0; i < 4; i++) {
                int nR = cR + r[i];
                int nC = cC + c[i];

                if (nR > 0 && nR <= N && nC > 0 && nC <= N) {

                    if (!visit[nR][nC]) {
                        visit[nR][nC] = true;
                        queue.add(new pair(nR, nC));
                    }

                }
            }
        }
    }
    private static void make(int rain, int N){

        for(int i=1; i<=N; i++){
            for(int j=1; j<=N; j++){
                if(map[i][j] <= rain){
                    visit[i][j] = true;
                }
            }
        }

    }

}
