import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Main {
    public static int W;
    public static int H;
    public static int[][] map;
    public static boolean[][] visit;
    //상하좌우 및 대각선도 포함
    public static int[] dr = {-1, 1, 0, 0, -1, -1, 1, 1};
    public static int[] dc = {0, 0, -1, 1, -1, 1, -1, 1};


    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        while(true){
            String[] tmp = br.readLine().split(" ");
            W = Integer.parseInt(tmp[0]);
            H = Integer.parseInt(tmp[1]);
            int island = 0;

            if(W == 0 && H == 0){
                break;
            }

            map = new int[H][W];
            visit = new boolean[H][W];

            for(int i=0; i<H; i++){
                String[] s = br.readLine().split(" ");
                for(int j=0; j<s.length; j++){
                    map[i][j] = Integer.parseInt(s[j]);
                }
            }

            for(int i=0; i<H; i++){
                for(int j=0; j<W; j++){
                    if(map[i][j] == 1 && !visit[i][j]){
                        //새로운 섬이 발견되면 island에 ++를 한 후 dfs를 실행
                        island++;
                        dfs(i, j);
                    }
                }
            }
            System.out.println(island);

        }

    }

    //깊이 우선 탐색
    public static void dfs(int x, int y){
        visit[x][y] = true;

        for(int i=0; i<8; i++){
            //상하좌우 및 대가선을 각각 탐색한다.
            //x는 열, y는 행을 기준으로 한다.
            int nx = x + dr[i];
            int ny = y + dc[i];
            //만일 좌표가 전부 map에 속해있고 해당 map에 길이 있으며 방문을 하지 않았으면 dfs 탐색을 한다.
            if(nx >= 0 && ny >= 0 && nx < H &&  ny < W){
                if(map[nx][ny]==1 && !visit[nx][ny]){
                    dfs(nx, ny);
                }
            }
        }
    }

}
