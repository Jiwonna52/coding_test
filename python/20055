import sys
import copy

n, k = map(int, sys.stdin.readline().rstrip().split(" "))
A = list(map(int, sys.stdin.readline().rstrip().split(" ")))
robots = [] #로봇의 위치를 알려줌
zero = 0
answer = 0

while True:
    zero = 0
    # 4. 내구도가 0인 칸의 개수가 k개 이상이면 종료한다.
    if A.count(0) >= k:
        break

    # 1. 벨트를 회전한다.
    # 제일 오른쪽(마지막 값)에서 하나 빼서 제일 왼쪽에 붙여줌
    tmp = copy.deepcopy(A)
    for i in range(0, len(tmp)-1):
        A[i+1] = tmp[i]
    A[0] = tmp[-1]

    # 벨트와 로봇이 함께 움직이니 로봇의 위치 조정이 필요
    delRobot = 0
    for j in range(len(robots)):
        tmpMove = robots[j]+1
        robots[j] = tmpMove
        if tmpMove == (n-1): # 회전했더니 n번째 칸에 도달한 로봇이 있다. -> 해당 로봇 삭제
            delRobot = robots[j]
        if robots[j] == len(A)-1: # 2n에 도달한 로봇이 있으면 1로 맞춰준다.
            robots[j] = 0

    if delRobot != 0:
        robots.remove(delRobot)
        delRobot = 0

    # 2. 가장 먼저 올라간 로봇부터 벨트가 회전하는 방향으로 움직인다.
    for index, robot in enumerate(robots):
        tmpMove = robot + 1
        # 만일 새로 이동하려는 위치가 2n이라면 1로 맞춰준다.
        if tmpMove == len(A)-1:
            tmpMove = 0
        # 만일 새로 이동하려는 칸에 로봇이 있거나 해당 칸의 내구도가 0이라면 이동하지 않는다.
        if tmpMove in robots:
            continue
        elif A[tmpMove] > 0:
            robots[index] = tmpMove
            A[robots[index]] -= 1
            if robots[index] == (n-1):
                delRobot = robots[index]

    if delRobot != 0:
        robots.remove(delRobot)
        delRobot = 0

    # 3. 올리는 위치의 칸의 내구도가 0이 아니면 로봇을 올린다.
    if A[0] > 0:
        A[0] -= 1
        robots.append(0)

    answer += 1

print(answer)
