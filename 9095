import java.io.IOException;
import java.util.StringTokenizer;
import java.util.HashMap;
import java.util.HashSet;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
 
public class Main {
	
	//해당 값 i를 만드는 데 드는 최소 연산의 개수
	static Integer[] arr;

	public static void main(String[] args)throws IOException{
		 BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		 
		 int num = Integer.parseInt(br.readLine());
		 
		 //n이 11보다 작다고 했으니까 10까지
		 arr = new Integer[11];
		 //1을 만들 수 있는 경우의 수는 {1}으로 1개이다.
		 arr[1] = 1;
		 //2을 만들 수 있는 경우의 수는 {1+1, 2}으로 2개이다.
		 arr[2] = 2;
		 //3을 만들 수 있는 경우의 수는 {1+1+1, 1+2, 2+1, 3}으로 4개이다.
		 arr[3] = 4;
		 
		 //4의 경우를 생각하면 {1+1+1+1, 1+2+1, 2+1+1, 1+1+2, 1+3, 3+1, 4}으로 총 7개이다.
		 //이는 4 = 1+3/2+2/3+1으로 3, 2, 1에다가 1, 2, 3을 더해서 만들 수 있다.
		 //5같은 경우도 1+4/2+3/3+2로 1, 2, 3을 고정으로 더해준 값을 만들 수 있다.
		 //그렇기에 [i-1]의 수 [i-2]의 수 [i-3]의 수를 전부 더해주면 해당 수의 경우의 수가 나오는 것이다.
		 //즉, 1+4의 경우 만들 수 있는 경우의 수는 {1+(1+1+1+1), 1+(1+2+1), 1+(2+1+1), 1+(1+1+2), 1+(1+3), 1+(3+1), 1+(4)}
		 //로 1을 더한 값은 갯수에 영향이 없고 4로 만들 수 있는 경우의 수가 나오는 것을 알 수 있다.
		 for(int i=4; i<11; i++) {
			 arr[i] = arr[i-1] + arr[i-2] + arr[i-3];
		 }
		 
		 StringBuilder sb = new StringBuilder();
		 
		 //모든 경우의 수를 구했다면 n의 경우의 수를 찾아서 출력하면 된다.
		 for(int i=0; i<num; i++) {
			 int n = Integer.parseInt(br.readLine());
			 sb.append(arr[n]).append('\n');
		 }
		 
		 System.out.println(sb);

	}
}
